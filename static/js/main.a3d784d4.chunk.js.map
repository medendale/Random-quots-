{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","data","setQuote","quoteClass","useRef","randomQuote","useCallback","a","fetch","response","json","fetchData","content","author","console","error","message","useEffect","current","id","className","TwitterButton","quote","type","onClick","props","href","target","rel","xmlns","viewBox","AppWrapper","SET","store","createStore","state","action","Container","connect","dispatch","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"0QAOA,SAASA,EAAT,GAAgC,IAAlBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,SACdC,EAAaC,iBAAO,UAElBC,EAAcC,sBAAW,sBAC7B,8BAAAC,EAAA,+EAE2BC,MAAO,kCAFlC,cAEUC,EAFV,gBAG4BA,EAASC,OAHrC,cAGUC,EAHV,gBAIUT,EAAS,CAACU,QAAQD,EAAUC,QAAQC,OAAOF,EAAUE,SAJ/D,gEAMIC,QAAQC,MAAR,MANJ,UAOUb,EAAS,CAACU,QAAQ,KAAMI,QAASH,OAAO,mBAPlD,0DAUF,CAACX,IAQD,OALAe,qBAAU,WACRZ,IACAF,EAAWe,QAAU,WACrB,CAACb,IAGD,yBAASc,GAAI,YAAYC,UAAWjB,EAAWe,QAA/C,SACE,6BAAYC,GAAI,QAAhB,UACE,mBAAGA,GAAI,OAAP,SAAelB,GAAQA,EAAKW,UAC5B,sBAAMO,GAAI,SAAV,SAAoBlB,GAAQA,EAAKY,SACjC,cAACQ,EAAD,CAAeC,MAAK,WAAQrB,EAAKW,QAAb,iBAA6BX,EAAKY,UACtD,wBAAQU,KAAM,SAASJ,GAAG,YAAYK,QAASnB,EAA/C,4BAQR,SAASgB,EAAcI,GACrB,OACE,mBACAC,KAAI,gDAA2CD,EAAMH,OACrDK,OAAO,SACPC,IAAI,sBACJT,GAAG,cAJH,SAME,qBACAA,GAAG,cACHU,MAAM,6BACNC,QAAQ,YAHR,SAKE,sBAAMX,GAAG,mgBAyCFY,MAnCf,WACE,IAAMC,EAAM,MAaNC,EAAQC,aANO,WAAyB,IAAxBC,EAAuB,uDAAf,GAAIC,EAAW,uCAC3C,OAAIA,EAAOb,OAASS,EACXI,EAAOd,MACHa,KAeXE,EAAYC,aAVM,SAACH,GACvB,MAAO,CAAElC,KAAKkC,MAEW,SAACI,GAC1B,MAAO,CACLrC,SAAS,SAACoB,GACRiB,EApBY,SAACjB,GACf,MAAO,CACLC,KAAMS,EACNV,SAiBSpB,CAASoB,QAINgB,CAA6CtC,GAE/D,OACE,cAAC,IAAD,CAAUiC,MAAOA,EAAjB,SACE,cAACI,EAAD,OChFgBG,QACa,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZRC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SDyHlB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAzC,GACLD,QAAQC,MAAMA,EAAMC,c","file":"static/js/main.a3d784d4.chunk.js","sourcesContent":["import React,{useCallback,useEffect,useRef} from 'react';\nimport {Provider,connect} from 'react-redux';\nimport { createStore } from 'redux';\nimport 'normalize.css'\nimport './App.scss';\n\n\nfunction App({data, setQuote}) {\n  let quoteClass = useRef('hidden');\n\n  const randomQuote = useCallback(\n    async function (){\n      try {\n        const response = await fetch ('https://api.quotable.io/random');\n        const fetchData = await response.json();\n        await setQuote({content:fetchData.content,author:fetchData.author});\n      }catch (error){\n        console.error(error);\n        await setQuote({content:error.message, author:'Critical error'})\n      }\n    },\n  [setQuote]\n  );\n\n  useEffect(()=> {\n    randomQuote();\n    quoteClass.current = 'active';\n  },[randomQuote]);\n\n  return (\n    <section id =\"quote-box\" className={quoteClass.current}>\n      <blockquote id =\"quote\">\n        <p id =\"text\">{data && data.content}</p>\n        <cite id =\"author\">{data && data.author}</cite>\n        <TwitterButton quote = {`\"${data.content}\"%0D~ ${data.author}`}/>\n        <button type =\"button\" id=\"new-quote\" onClick={randomQuote}>\n          New Quote\n        </button>\n      </blockquote>\n    </section>\n  );\n}\n\nfunction TwitterButton(props) {\n  return (\n    <a\n    href={`https://twitter.com/intent/tweet?text=${props.quote}`}\n    target=\"_blank\"\n    rel=\"noopener noreferrer\"\n    id=\"tweet_quote\"\n    >\n      <svg\n      id=\"twiter-logo\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      viewBox=\"0 0 24 20\"\n      >\n        <path id=\"M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z\"/>\n        </svg>\n        </a>\n  );\n}\n\nfunction AppWrapper(){\n  const SET = 'SET';\n  const setQuote =(quote) => {\n    return {\n      type: SET,\n      quote,\n    };\n  };\n  const quoteReducer = (state = {}, action) => {\n    if (action.type === SET){\n      return action.quote;\n    }else return state;\n  }\n\n  const store = createStore(quoteReducer);\n\nconst mapStateToProps = (state)=> {\n  return { data:state};\n};\nconst mapDispatchToProps = (dispatch)=>{\n  return {\n    setQuote:(quote)=>{\n      dispatch(setQuote(quote));\n    },\n  };\n};\nconst Container = connect(mapStateToProps, mapDispatchToProps)(App)\n\nreturn (\n  <Provider store={store}>\n    <Container />\n  </Provider>\n);\n}\n\nexport default AppWrapper;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.0/8 are considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Let's check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl, config);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\n            );\n          });\n        } else {\n          // Is not localhost. Just register service worker\n          registerValidSW(swUrl, config);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          if (installingWorker == null) {\n            return;\n          }\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the updated precached content has been fetched,\n                // but the previous service worker will still serve the older\n                // content until all client tabs are closed.\n                console.log(\n                  'New content is available and will be used when all ' +\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                );\n  \n                // Execute callback\n                if (config && config.onUpdate) {\n                  config.onUpdate(registration);\n                }\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n  \n                // Execute callback\n                if (config && config.onSuccess) {\n                  config.onSuccess(registration);\n                }\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n      headers: { 'Service-Worker': 'script' },\n    })\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        const contentType = response.headers.get('content-type');\n        if (\n          response.status === 404 ||\n          (contentType != null && contentType.indexOf('javascript') === -1)\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, config);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready\n        .then(registration => {\n          registration.unregister();\n        })\n        .catch(error => {\n          console.error(error.message);\n        });\n    }\n  }\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppWrapper from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <AppWrapper />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nserviceWorker.unregister();\n\n"],"sourceRoot":""}